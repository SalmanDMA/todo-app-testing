<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <title>Dashboard</title>
 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
 <style>
   .popup {
     display: none;
     position: fixed;
     top: 50%;
     left: 50%;
     transform: translate(-50%, -50%);
     background-color: white;
     padding: 20px;
     border-radius: 5px;
     box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
     z-index: 9999;
   }

   .overlay {
     display: none;
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     background-color: rgba(0, 0, 0, 0.5);
   }
 </style>
</head>
<body>
 <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Dashboard</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#"> <%= user.name %></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/logout">Logout</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<div>
  <a href="#" class="btn btn-primary" id="addTodoButton">Add Todo</a>
</div>
<div class="container my-5" id="todoContainer">
  
</div>

<div class="popup" id="addTodoPopup">
  <h3>Add Todo</h3>
  <form id="addTodoForm">
    <div class="mb-3">
      <label for="task" class="form-label">Task</label>
      <input type="text" class="form-control" id="task" name="task">
    </div>
    <div class="mb-3">
      <label for="completed" class="form-label">Completed</label>
      <input type="checkbox" class="form-check-input" id="completed" name="completed">
    </div>
    <div class="mb-3">
      <label for="class" class="form-label">Class</label>
      <select class="form-select" id="class" name="class">
        <option value="high">High</option>
        <option value="medium">Medium</option>
        <option value="low">Low</option>
      </select>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
  </form>
  <button class="btn btn-secondary" id="closeAddTodoPopup">Close</button>
</div>

<div class="popup" id="editTodoPopup">
  <h3>Edit Todo</h3>
  <form id="editTodoForm">
    <input type="hidden" id="editTodoId" name="id">
    <div class="mb-3">
      <label for="editTask" class="form-label">Task</label>
      <input type="text" class="form-control" id="editTask" name="task">
    </div>
    <div class="mb-3">
      <label for="editCompleted" class="form-label">Completed</label>
      <input type="checkbox" class="form-check-input" id="editCompleted" name="completed">
    </div>
    <div class="mb-3">
      <label for="editClass" class="form-label">Class</label>
      <select class="form-select" id="editClass" name="class">
        <option value="high">High</option>
        <option value="medium">Medium</option>
        <option value="low">Low</option>
      </select>
    </div>
    <button type="submit" class="btn btn-primary">Save Changes</button>
  </form>
  <button class="btn btn-secondary" id="closeEditTodoPopup">Close</button>
</div>

<div class="overlay" id="overlay"></div>

<script>
  // Fungsi async untuk mengambil data todos
  async function fetchTodos() {
    try {
      // Mendapatkan access token dari req.user
      const accessToken = '<%= accessToken %>';

      const response = await fetch('/api/todos', {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      
      const data = await response.json();

      // Looping melalui data todos
      data.data.forEach(todo => {
        // Buat elemen card untuk setiap todo
        const card = document.createElement('div');
        card.classList.add('card', 'my-3');

        // Isi konten card dengan informasi todo
        card.innerHTML = `
          <div class="card-body">
            <h5 class="card-title">${todo.task}</h5>
            <p class="card-text">Completed: ${todo.completed ? 'Yes' : 'No'}</p>
            <p class="card-text">Class: ${todo.class}</p>
            <button class="btn btn-primary editTodo" data-id="${todo.id}">Edit</button>
            <button class="btn btn-danger deleteTodo" data-id="${todo.id}">Delete</button>
          </div>
        `;

        // Masukkan card ke dalam container
        document.getElementById('todoContainer').appendChild(card);
      });

      // Tambahkan event listener untuk tombol edit dan delete
      document.querySelectorAll('.editTodo').forEach(btn => {
        btn.addEventListener('click', handleEditTodo);
      });

      document.querySelectorAll('.deleteTodo').forEach(btn => {
        btn.addEventListener('click', handleDeleteTodo);
      });
    } catch (error) {
      console.error('Error fetching todos:', error);
    }
  }

  // Fungsi untuk menangani penambahan todo
  function handleAddTodo() {
    document.getElementById('addTodoPopup').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';

    document.getElementById('addTodoForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const task = document.getElementById('task').value;
      const completed = document.getElementById('completed').checked;
      const classValue = document.getElementById('class').value;

      try {
        const accessToken = '<%= accessToken %>';

        const response = await fetch('/api/todos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`
          },
          body: JSON.stringify({ task, completed, class: classValue })
        });

        if (response.ok) {
          location.reload();
        } else {
          const errorData = await response.json();
          alert(errorData.message || 'Failed to add todo');
        }
      } catch (error) {
        console.error('Error adding todo:', error);
        alert('Failed to add todo');
      }
    });

    document.getElementById('closeAddTodoPopup').addEventListener('click', () => {
      document.getElementById('addTodoPopup').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';
    });
  }

  function handleEditTodo() {
    const todoId = this.getAttribute('data-id');

    fetch(`/api/todos/${todoId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer <%= accessToken %>`
      }
    })
      .then(response => response.json())
      .then(data => {
        document.getElementById('editTodoId').value = todoId;
        document.getElementById('editTask').value = data.data.task;
        document.getElementById('editCompleted').checked = data.data.completed;
        document.getElementById('editClass').value = data.data.class;

        document.getElementById('editTodoPopup').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
      })
      .catch(error => {
        console.error('Error fetching todo for editing:', error);
        alert('Failed to fetch todo for editing');
      });

    document.getElementById('closeEditTodoPopup').addEventListener('click', () => {
      document.getElementById('editTodoPopup').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';
    });

    document.getElementById('editTodoForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const editedTask = document.getElementById('editTask').value;
      const editedCompleted = document.getElementById('editCompleted').checked;
      const editedClass = document.getElementById('editClass').value;

      try {
        const accessToken = '<%= accessToken %>';

        const response = await fetch(`/api/todos/${todoId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`
          },
          body: JSON.stringify({ task: editedTask, completed: editedCompleted, class: editedClass })
        });

        if (response.ok) {
          location.reload();
        } else {
          const errorData = await response.json();
          alert(errorData.message || 'Failed to save changes');
        }
      } catch (error) {
        console.error('Error saving todo changes:', error);
        alert('Failed to save changes');
      }
    });
  }

  async function handleDeleteTodo() {
    const todoId = this.getAttribute('data-id');

    try {
      const accessToken = '<%= accessToken %>';

      const response = await fetch(`/api/todos/${todoId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });

      if (response.ok) {
        this.closest('.card').remove();
      } else {
        const errorData = await response.json();
        alert(errorData.message || 'Failed to delete todo');
      }
    } catch (error) {
      console.error('Error deleting todo:', error);
      alert('Failed to delete todo');
    }
  }

  document.addEventListener('DOMContentLoaded', fetchTodos);

  document.getElementById('addTodoButton').addEventListener('click', handleAddTodo);
</script>
</body>
</html>
